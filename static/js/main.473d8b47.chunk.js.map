{"version":3,"sources":["avatars.ts","getBotReply.ts","AnswerProvider.tsx","Chat.tsx","index.tsx","App.tsx"],"names":["avatars","botReplies","answer","suggestions","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","padding","spacing","chip","margin","AnswerProvider","props","classes","Paper","className","message","find","value","getSuggestions","map","data","index","Chip","onClick","console","log","onAnswerPicked","key","label","Chat","useState","content","setContent","lastInputValue","setLastInputValue","lastUnsubmittedInput","setLastUnsubmittedInput","undefined","lastBotReply","setLastBotReply","useEffect","lastEntry","length","isUser","useUserTyping","isBotDoneTyping","useBotTyping","Math","floor","random","isLoading","headerAdditionalContent","style","flex","onChange","text","onSubmit","footer","push","id","avatar","makeMessage","ReactDOM","render","height","width","flexDirection","borderRadius","boxShadow","document","getElementById"],"mappings":"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","file":"static/js/main.473d8b47.chunk.js","sourcesContent":["export const avatars = {\n    user: \"https://img.icons8.com/color/search/0\",\n    bot: \"https://img.icons8.com/color/search/1\"\n};\n","const botReplies = [{answer:\"Wow!\", suggestions: [\"That's amaizing\", \"Right\", \"YEP\"]},\n    {answer: \"Fascinating, please do go on\", suggestions: [\"Sure\", \"Let's start\", \"No way\", \"Are you sure?\"]},\n    {answer: \"Amazing!\", suggestions:[\"Really?\", \"Got you\", \"Thanx!!!\"]},\n    {answer: \"If you say so...\", suggestions:[\"Will do It\", \"Any Concerns\"]}];\n\nexport const getBotReply = () => botReplies[Math.floor(Math.random() * botReplies.length)].answer;\n\nexport const getSuggestions = (message: string): string[] | undefined => botReplies.find(value => value.answer === message)?.suggestions;\n","import React from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport Paper from '@material-ui/core/Paper';\nimport {getSuggestions} from \"./getBotReply\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n        root: {\n            display: 'flex',\n            justifyContent: 'center',\n            flexWrap: 'wrap',\n            padding: theme.spacing(0.5),\n        },\n        chip: {\n            margin: theme.spacing(0.5),\n        },\n    }));\n\nexport const AnswerProvider = (props: any) => {\n    const classes = useStyles();\n    return (\n        <Paper className={classes.root}>\n            {getSuggestions(props.message)?.map((data, index) => {\n                return (\n                    <Chip\n                        onClick={() => {\n                            console.log(`clicked ${data}`);\n                            props.onAnswerPicked(data)\n                        }}\n                        key={index}\n                        label={data}\n                        className={classes.chip}\n                    />\n                );\n            })}\n        </Paper>\n    );\n}","import React, {useState, useEffect} from \"react\";\nimport {ChatEntry} from \"@conversationalcomponents/chat-window/types\";\nimport {ChatWindow, useUserTyping, useBotTyping} from \"@conversationalcomponents/chat-window\";\nimport {avatars} from \"./avatars\";\nimport {getBotReply} from \"./getBotReply\";\nimport {AnswerProvider} from \"./AnswerProvider\";\n\nexport const Chat = () => {\n    const [content, setContent] = useState<ChatEntry[]>([]);\n    const [lastInputValue, setLastInputValue] = useState(\"\");\n    const [lastUnsubmittedInput, setLastUnsubmittedInput] = useState(\"\");\n    const [lastBotReply, setLastBotReply] = useState<string | undefined>(undefined);\n\n    useEffect(() => {\n        const lastEntry = content.length && content[content.length - 1];\n        if (!lastEntry || lastEntry.isUser) return;\n        setLastInputValue(\"\");\n    }, [content]);\n\n    useEffect(() => {\n        lastInputValue && setLastUnsubmittedInput(\"\");\n    }, [lastInputValue]);\n\n    // this pushes an entry to content with {isUser:true, isLoading:true}, and either removes it when user cancels typing or changes it to {message:lastInputValue, isLoading:false} when user submits\n    useUserTyping(content, setContent, lastUnsubmittedInput, lastInputValue, avatars.user);\n    // this pushes an entry to content with {isUser:false, isLoading:true} and returns false, then waits for a short random period, and returns true\n    const isBotDoneTyping = useBotTyping(content, setContent, lastInputValue, avatars.bot);\n\n    useEffect(() => {\n        if (!isBotDoneTyping) return;\n        const lastEntry = content.length && content[content.length - 1];\n        if (!lastEntry || lastEntry.isUser) return;\n        lastEntry.message = getBotReply();\n        lastEntry.isLoading = false;\n        //intercept last bot message, to build suggestions list\n        setLastBotReply(lastEntry.message);\n        setLastUnsubmittedInput('');\n    }, [content, isBotDoneTyping]);\n\n    //hack which uggly and based on internal ChatWindow internal implementation,  needed to prevent owerriding user message\n    // by bot message when sent using  setLastInputValue(text); in other case bot owerride this message\n    const makeMessage = (isUser: boolean, text: string, id: number) => ({\n        isUser,\n        message: text,\n        avatar: avatars.user,\n        id: `message_${id}`,\n        isLoading: false\n    });\n\n    function getFooter() {\n        if (content.length > 0 && !content[0].isLoading) {\n            return <AnswerProvider message={lastBotReply}\n                                   onAnswerPicked={(text: string) => {\n                                       // manual insert data to content - hack better to investigate public API of Chat Window\n                                       content.push(makeMessage(true, text, content.length))\n                                       setLastInputValue(text);\n                                   }\n                                   }\n            />\n        } else {\n            return undefined;\n        }\n    }\n\n    return (<ChatWindow\n            headerAdditionalContent={<div style={{flex: 1, display: \"flex\", justifyContent: \"center\"}}>HEADER</div>}\n            content={content}\n            onChange={(text: string) => setLastUnsubmittedInput(text)}\n            onSubmit={(text: string) => setLastInputValue(text)}\n            footer={getFooter()}\n        />\n    );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {App} from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React from \"react\";\nimport {Chat} from \"./Chat\";\n\nexport const App: React.FC = () => {\n    return (\n        <div\n            style={{\n                height: \"calc(100vh - 40px)\",\n                width: \"100%\",\n                display: \"flex\",\n                justifyContent: \"center\"\n            }}>\n            <div\n                style={{\n                    height: \"100%\",\n                    width: \"360px\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    borderRadius: \"10px\",\n                    boxShadow: \"rgba(0,0,0,0.5) 0px 0px 3px 3px\"\n                }}>\n                <Chat />\n            </div>\n        </div>\n    );\n};\n"],"sourceRoot":""}